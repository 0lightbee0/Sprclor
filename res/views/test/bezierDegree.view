<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script src="/lib/cvsTestTool.js"></script>
    <script>
        addEventListener("load", () => {
            setup(document.querySelector("canvas"))(start);
        })

        function start(opt) {
            let {
                mpos: mpos
            } = opt;
            let P0 = new Point(200, 200),
                P1 = new Point(240, 100),
                P2 = new Point(170, 90);
            P3 = new Point(270, 70);
            P4 = new Point(50, 30);

            addEventListener("mousemove", () => {
                P2.set(mpos);
            })
            return opt => {
                let {
                    ctx
                } = opt;

                drawBezier2Curve(ctx, [P0, P1, P2, P3, P4]);
            }
        }

        function bezier2(t, w) {
            let t2 = t * t,
                mt = 1 - t,
                mt2 = mt * mt;
            return mt2 * w[0] + 2 * mt * t * w[1] + t2 * w[2]
        }

        function bezier3(t, w) {
            let t2 = t * t,
                t3 = t2 * t,
                mt = 1 - t,
                mt2 = mt * mt,
                mt3 = mt2 * mt;
            return mt3 * w[0] + 3 * mt2 * t * w[1] + 3 * mt * t2 * w[2] + t3 * w[3]
        }

        function drawBezier2Curve(ctx, ps) {
            // draw handler line
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(ps[0].x, ps[0].y);
            for (let i = 1; i < ps.length; i += 1) {
                ctx.lineTo(ps[i].x, ps[i].y);
            }
            ctx.stroke();
            ctx.restore();

            // draw curves by origin
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(ps[0].x, ps[0].y);
            for (let i = 1; i < ps.length; i += 2) {
                let p1 = ps[i],
                    p2 = ps[i + 1];
                ctx.quadraticCurveTo(p1.x, p1.y, p2.x, p2.y);
            }
            ctx.strokeStyle = 'rgba(150,150,150,0.2)';
            ctx.lineWidth = 8;
            ctx.stroke();
            ctx.restore();

            // draw curves by lines
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(ps[0].x, ps[0].y);
            let {
                pow
            } = Math;
            let count = ps.length / 2 >> 0;
            let last = ps.shift();
            for (let i = 0; i < count; i += 1) {
                let psn = ps.splice(0, 2);
                psn.unshift(last);
                let xs = psn.map(p => {
                    return p.x;
                })
                let ys = psn.map(p => {
                    return p.y;
                })
                last = psn[2];
                for (let t = 0; t <= 1; t += 0.1) {
                    let x = 0,
                        y = 0;
                    x = bezier2(t, xs);
                    y = bezier2(t, ys);
                    ctx.lineTo(x, y);
                }
            }
            ctx.strokeStyle = 'rgba(235,87,87,0.7)';
            ctx.lineWidth = 2;
            ctx.stroke();
            ctx.restore();
        }
    </script>
    <title>Document</title>
</head>

<body>
    <canvas></canvas>
</body>

</html>