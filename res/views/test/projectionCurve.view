<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Projection Curve Test</title>
    <style>
        html{
            user-select: none;
        }
        canvas {
            position: absolute;
            left: 0;
            top: 0;
        }

        .flag {
            position: absolute;
            left: 12px;
            top: 8px;
        }
    </style>
    <script>
        addEventListener("load", () => {
            class Point {
                constructor(x, y) {
                    this.x = x || 0;
                    this.y = y || 0;
                }
                len() {
                    return getDist(0, 0, this.x, this.y);
                }
                normalize() {
                    let len = this.len();
                    if (len) {
                        this.x /= len;
                        this.y /= len;
                    }
                }
                draw(ctx) {
                    ctx.save();
                    ctx.beginPath();
                    ctx.translate(this.x, this.y);
                    ctx.arc(0, 0, 6, 0, Math.PI * 2);
                    ctx.fillStyle = "rgba(200,200,70,0.5)";
                    ctx.fill();
                    // ctx.stroke();
                    ctx.restore();
                }
            }
            class Circle {
                constructor(x, y, r) {
                    this.x = x;
                    this.y = y;
                    this.r = r;
                }
                draw(ctx) {
                    ctx.save();
                    ctx.translate(this.x, this.y);
                    ctx.beginPath();
                    ctx.arc(0, 0, this.r, 0, Math.PI * 2);
                    ctx.strokeStyle = "rgba(120,80,240,0.5)";
                    ctx.lineWidth = 3;
                    ctx.stroke();
                    ctx.restore();
                }
            }
            let cvs = document.querySelector("canvas");
            let ctx = cvs.getContext("2d");
            let flag = document.querySelector(".flag");
            let isOvered = false;

            let zeroMax = 0;

            let p0 = new Point(),
                p1 = new Point(),
                p2 = new Point(),

                pos = new Point(),
                tan = new Point(),
                nor = new Point(),

                A = new Point(),
                B = new Point(),
                solution = new Object(),
                nearest = new Object(),
                posMin = new Point();

            function thirdDegreeEquation(a, b, c, d) {
                if (Math.abs(a) > zeroMax) {
                    // let's adopt form: x3 + ax2 + bx + d = 0
                    var z = a; // multi-purpose util variable
                    a = b / z;
                    b = c / z;
                    c = d / z;
                    // we solve using Cardan formula: http://fr.wikipedia.org/wiki/M%C3%A9thode_de_Cardan
                    var p = b - a * a / 3;
                    var q = a * (2 * a * a - 9 * b) / 27 + c;
                    var p3 = p * p * p;
                    var D = q * q + 4 * p3 / 27;
                    var offset = -a / 3;
                    if (D > zeroMax) {
                        // D positive
                        z = Math.sqrt(D)
                        var u = (-q + z) / 2;
                        var v = (-q - z) / 2;
                        u = (u >= 0) ? Math.pow(u, 1 / 3) : -Math.pow(-u, 1 / 3);
                        v = (v >= 0) ? Math.pow(v, 1 / 3) : -Math.pow(-v, 1 / 3);
                        solution.s1 = u + v + offset;
                        solution.count = 1;
                        return solution;
                    } else if (D < -zeroMax) {
                        // D negative
                        var u = 2 * Math.sqrt(-p / 3);
                        var v = Math.acos(-Math.sqrt(-27 / p3) * q / 2) / 3;
                        solution.s1 = u * Math.cos(v) + offset;
                        solution.s2 = u * Math.cos(v + 2 * Math.PI / 3) + offset;
                        solution.s3 = u * Math.cos(v + 4 * Math.PI / 3) + offset;
                        solution.count = 3;
                        return solution;
                    } else {
                        // D zero
                        var u;
                        if (q < 0) u = Math.pow(-q / 2, 1 / 3);
                        else u = -Math.pow(q / 2, 1 / 3);
                        solution.s1 = 2 * u + offset;
                        solution.s2 = -u + offset;
                        solution.count = 2;
                        return solution;
                    }
                } else {
                    // a = 0, then actually a 2nd degree equation:
                    // form : ax2 + bx + c = 0;
                    a = b;
                    b = c;
                    c = d;
                    if (Math.abs(a) <= zeroMax) {
                        if (Math.abs(b) <= zeroMax) return null;
                        else {
                            solution.s1 = -c / b;
                            solution.count = 1;
                            return solution;
                        }
                    }
                    var D = b * b - 4 * a * c;
                    if (D <= -zeroMax) return null;
                    if (D > zeroMax) {
                        // D positive
                        D = Math.sqrt(D);
                        solution.s1 = (-b - D) / (2 * a);
                        solution.s2 = (-b + D) / (2 * a);
                        solution.count = 2;
                        return solution;
                    } else if (D < -zeroMax) {
                        // D negative
                        return null;
                    } else {
                        // D zero
                        solution.s1 = -b / (2 * a);
                        solution.count = 1
                        return solution;
                    }
                }
            }

            function update(x0, y0, x1, y1, x2, y2) {
                p0.x = x0;
                p0.y = y0;
                p1.x = x1;
                p1.y = y1;
                p2.x = x2;
                p2.y = y2;

                // precompute A and B, which will be very useful next.
                A.x = p1.x - p0.x;
                A.y = p1.y - p0.y;
                B.x = p0.x - 2 * p1.x + p2.x;
                B.y = p0.y - 2 * p1.y + p2.y;

                // rough evaluation of bounds:
                // xMin = Math.min(x0, Math.min(x1, x2));
                // xMax = Math.max(x0, Math.max(x1, x2));
                // yMin = Math.min(y0, Math.min(y1, y2));
                // yMax = Math.max(y0, Math.max(y1, y2));

                // // more accurate evaluation:
                // // see Andree Michelle for a faster but less readable method 
                // let u;
                // if (xMin == x1 || xMax == x1) {
                //     u = -A.x / B.x; // u where getTan(u).x == 0
                //     u = (1 - u) * (1 - u) * p0.x + 2 * u * (1 - u) * p1.x + u * u * p2.x;
                //     if (xMin == x1) xMin = u;
                //     else xMax = u;
                // }
                // if (yMin == y1 || yMax == y1) {
                //     u = -A.y / B.y; // u where getTan(u).y == 0
                //     u = (1 - u) * (1 - u) * p0.y + 2 * u * (1 - u) * p1.y + u * u * p2.y;
                //     if (yMin == y1) yMin = u;
                //     else yMax = u;
                // }

                cvs.width = innerWidth;
                cvs.height = innerHeight;

                ctx.clearRect(0, 0, innerWidth, innerHeight);
                ctx.save();
                ctx.beginPath();
                ctx.moveTo(x0, y0);
                ctx.quadraticCurveTo(x1, y1, x2, y2);
                if (isOvered) {
                    ctx.lineWidth = 3;
                    ctx.strokeStyle = "rgba(100,150,150,1)";
                } else {
                    ctx.lineWidth = 1;
                    ctx.strokeStyle = "rgba(200,50,150,0.7)";
                }
                ctx.stroke();
                ctx.restore();
            }

            // returns { t:Number, pos:Point, dist:Number, nor:Point }
            // (costs about 80 multiplications+additions)
            function findNearestPoint(x, y) {
                // a temporary util vect = p0 - (x,y) This is M':P0-M
                pos.x = p0.x - x;
                pos.y = p0.y - y;
                // search points P of bezier curve with PM.(dP / dt) = 0
                // a calculus leads to a 3d degree equation :
                var a = B.x * B.x + B.y * B.y;
                var b = 3 * (A.x * B.x + A.y * B.y);
                var c = 2 * (A.x * A.x + A.y * A.y) + pos.x * B.x + pos.y * B.y;
                var d = pos.x * A.x + pos.y * A.y;
                var sol = thirdDegreeEquation(a, b, c, d);

                var t;
                var dist;
                var tMin;
                var distMin = Number.MAX_VALUE;
                var d0 = getDist(x, y, p0.x, p0.y);
                var d2 = getDist(x, y, p2.x, p2.y);
                var orientedDist;

                if (sol != null) {
                    // find the closest point:
                    for (var i = 1; i <= sol.count; i++) {
                        t = sol["s" + i];
                        if (t >= 0 && t <= 1) {
                            pos = getPos(t);
                            dist = getDist(x, y, pos.x, pos.y);
                            if (dist < distMin) {
                                // minimum found!
                                tMin = t;
                                distMin = dist;
                                posMin.x = pos.x;
                                posMin.y = pos.y;
                            }
                        }
                    }
                    if (tMin != null && distMin < d0 && distMin < d2) {
                        // the closest point is on the curve
                        nor.x = A.y + tMin * B.y;
                        nor.y = -(A.x + tMin * B.x);
                        nor.normalize(1);
                        orientedDist = distMin;
                        if ((x - posMin.x) * nor.x + (y - posMin.y) * nor.y < 0) {
                            nor.x *= -1;
                            nor.y *= -1;
                            orientedDist *= -1;
                        }

                        nearest.t = tMin;
                        nearest.pos = posMin;
                        nearest.nor = nor;
                        nearest.dist = distMin;
                        nearest.orientedDist = orientedDist;
                        nearest.onCurve = true;
                        return nearest;
                    }

                }
                // the closest point is one of the 2 end points
                if (d0 < d2) {
                    distMin = d0;
                    tMin = 0;
                    posMin.x = p0.x;
                    posMin.y = p0.y;
                } else {
                    distMin = d2;
                    tMin = 1;
                    posMin.x = p2.x;
                    posMin.y = p2.y;
                }
                nor.x = x - posMin.x;
                nor.y = y - posMin.y;
                nor.normalize(1);

                nearest.t = tMin;
                nearest.pos = posMin;
                nearest.nor = nor;
                nearest.orientedDist = nearest.dist = distMin;
                nearest.onCurve = false;
                return nearest;
            }

            function getDist(x1, y1, x2, y2) {
                return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
            }

            function getPos(t) {
                var a = (1 - t) * (1 - t);
                var b = 2 * t * (1 - t);
                var c = t * t;
                pos.x = a * p0.x + b * p1.x + c * p2.x;
                pos.y = a * p0.y + b * p1.y + c * p2.y;
                return pos;
            }

            let mx = 0,
                my = 0;

            addEventListener("mousemove", e => {
                let {
                    clientX,
                    clientY
                } = e;
                mx = clientX;
                my = clientY;
            })

            function _() {
                let tx = '';
                update(400, 340, 250, 130, 300, 611);
                let p = new Point(mx, my);
                p.draw(ctx);
                let t = Date.now();
                let r = findNearestPoint(p.x, p.y);
                t = Date.now() - t;
                tx += "time: " + t + "ms, dist: " + r.dist;
                if (r.dist < 5) {
                    isOvered = true;
                } else {
                    isOvered = false;
                }
                r.pos.draw(ctx);
                let c = new Circle(p.x, p.y, r.dist);
                c.draw(ctx);
                flag.textContent = tx;

                requestAnimationFrame(_);
            }
            _();
        })
    </script>
</head>

<body>
    <div class="flag"></div>
    <canvas></canvas>
</body>

</html>