<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script src="/lib/cvsTestTool.js"></script>
    <script src="/TCAD.js"></script>
    <script>
        
        function bezier2(t, w) {
            let t2 = t * t,
                mt = 1 - t,
                mt2 = mt * mt;
            return mt2 * w[0] + 2 * mt * t * w[1] + t2 * w[2]
        }

        function bezier3(t, w) {
            let t2 = t * t,
                t3 = t2 * t,
                mt = 1 - t,
                mt2 = mt * mt,
                mt3 = mt2 * mt;
            return mt3 * w[0] + 3 * mt2 * t * w[1] + 3 * mt * t2 * w[2] + t3 * w[3]
        }

        function bezier3_derivative_myself(t, w) {
            let a = -3 * w[0] + 9 * w[1] - 9 * w[2] + 3 * w[3];
            let b = 6 * w[0] - 12 * w[1] + 6 * w[2];
            let c = -3 * w[0] + 3 * w[1];
            return a * t * t + b * t + c;
        }

        function bezier3_derivative(t, w) {
            var mt = 1 - t,
                a = mt * mt,
                b = mt * t * 2,
                c = t * t;

            return a * w[0] + b * w[1] + c * w[2];
        }
        class Curve {
            constructor(sp, inp, outp, ep) {
                this.start = sp || new Point();
                this.handlerIn = inp || new Point;
                this.handlerOut = outp || new Point;
                this.end = ep || new Point();
                this.path = new Path2D();
                this.update();
                this.ctx = null;
            }
            update() {
                let p0 = this.start;
                let p1 = this.handlerIn;
                let p2 = this.handlerOut;
                let p3 = this.end;
                this.path.moveTo(p0.x, p0.y);
                this.path.bezierCurveTo(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
            }
            isHit(x, y) {
                if (this.ctx) {
                    return this.ctx.isPointInPath(this.path, x, y);
                }
                return false;
            }
            draw(ctx, opt) {
                this.ctx = ctx;
                opt = checkOpt(opt, {
                    strokeColor: "#333",
                    lineWidth: 1,
                })
                ctx.save();
                ctx.lineWidth = opt.lineWidth;
                ctx.strokeStyle = opt.strokeColor;
                ctx.fillStyle = "none";
                ctx.stroke(this.path);
                ctx.restore();
            }
        }

        addEventListener("load", () => {
            setup(document.querySelector("canvas"), start);
        })

        function start(opt) {
            let {
                mpos,
                render
            } = opt;
            let pos = new Point(140, 80);
            let p0 = new Point(215, 160);
            let p1 = new Point(150, 60);
            let p2 = new Point(210, 90);
            let p3 = new Point(110, 290);
            let curve = new Curve(
                p0,
                p1,
                p2,
                p3,
            );
            let cvOpt = {
                strokeColor: "blue",
            };
            render.add(curve, cvOpt);
            render.add([p0, p1, p2, p3]);

            let ps = [p0, p1, p2, p3];
            let psx = ps.map(v => {
                return v.x;
            });
            let psy = ps.map(v => {
                return v.y;
            });
            let vx = bezier3(0.5, psx);
            let vy = bezier3(0.5, psy);
            let itp = new Point(vx, vy);
            render.add(itp);

            let tangent = new Vector();
            let tangentVOpt = {
                len: 30,
                pos: new Point(20, 80),
                color: 'blue',
                drawArrow: false,
            };
            let normalVOpt = {
                len: 30,
                pos: new Point(20, 80),
                color: 'red',
                drawArrow: false,
            };
            let normal = new Vector();
            render.add(normal, normalVOpt);
            render.add(tangent, tangentVOpt);

            let pp = new Point();
            // render.add(pp, {
            //     strokeColor: 'red',
            // });

            // let bderx = bezier3_derivative(0.5, psx);
            // let bdery = bezier3_derivative(0.5, psy);

            addEventListener("mousemove", (e) => {
                let {
                    clientX
                } = e;
                let r = clientX / innerWidth;
                let vx = bezier3(r, [p0.x, p1.x, p2.x, p3.x]);
                let vy = bezier3(r, [p0.y, p1.y, p2.y, p3.y]);
                itp.set(vx, vy);

                let bderx = bezier3_derivative(r, psx);
                let bdery = bezier3_derivative(r, psy);
                pp.set(bderx, bdery);
                let vv = new Vector(pp).subtract(itp);
                tangent.set(vv);
                normal.set(tangent);
                normal.rotate(-90);

                tangentVOpt.pos.set(vx, vy);
                normalVOpt.pos.set(vx, vy);

                if (curve.isHit(clientX, e.clientY)) {
                    cvOpt.strokeColor = "red";
                    cvOpt.lineWidth = 3;
                } else {
                    cvOpt.strokeColor = "#333";
                    cvOpt.lineWidth = 1;
                }
            })
        }

        function draw(ctx) {
            let {
                PI
            } = Math;

        }

        function thirdDegreeEquation(a, b, c, d) {
            let {
                abs,
                sqrt,
                cos,
                acos,
                PI,
                pow
            } = Math;
            let solution = [];
            if (abs(a) > 0) {
                // let's adopt form: x3 + ax2 + bx + d = 0
                let z = a; // multi-purpose util variable
                a = b / z;
                b = c / z;
                c = d / z;
                // we solve using Cardan formula: http://fr.wikipedia.org/wiki/M%C3%A9thode_de_Cardan
                let p = b - a * a / 3;
                let q = a * (2 * a * a - 9 * b) / 27 + c;
                let p3 = p * p * p;
                let D = q * q + 4 * p3 / 27;
                let offset = -a / 3;
                if (D > 0) {
                    // D positive
                    z = sqrt(D)
                    let u = (-q + z) / 2;
                    let v = (-q - z) / 2;
                    u = (u >= 0) ? pow(u, 1 / 3) : -pow(-u, 1 / 3);
                    v = (v >= 0) ? pow(v, 1 / 3) : -pow(-v, 1 / 3);
                    solution.push(u + v + offset);
                    return solution;
                } else if (D < -0) {
                    // D negative
                    let u = 2 * sqrt(-p / 3);
                    let v = acos(-sqrt(-27 / p3) * q / 2) / 3;
                    solution.push(
                        u * cos(v) + offset,
                        u * cos(v + 2 * PI / 3) + offset,
                        u * cos(v + 4 * PI / 3) + offset
                    );
                    return solution;
                } else {
                    // D zero
                    let u;
                    if (q < 0) u = pow(-q / 2, 1 / 3);
                    else u = -pow(q / 2, 1 / 3);
                    solution.push(
                        2 * u + offset,
                        -u + offset
                    );
                    return solution;
                }
            } else {
                // a = 0, then actually a 2nd degree equation:
                // form : ax2 + bx + c = 0;
                a = b;
                b = c;
                c = d;
                if (abs(a) <= 0) {
                    if (abs(b) <= 0) return null;
                    else {
                        solution.push(-c / b);
                        return solution;
                    }
                }
                let D = b * b - 4 * a * c;
                if (D <= -0) return null;
                if (D > 0) {
                    // D positive
                    D = sqrt(D);
                    solution.push(
                        (-b - D) / (2 * a),
                        (-b + D) / (2 * a)
                    );
                    return solution;
                } else if (D < -0) {
                    // D negative
                    return null;
                } else {
                    // D zero
                    solution.push(-b / (2 * a));
                    return solution;
                }
            }
        }
    </script>
    <title>Projection Curve 2</title>
</head>

<body>
    <canvas></canvas>
</body>

</html>